AWSTemplateFormatVersion: 2010-09-09

Description: CloudProject07:02

Parameters:

  VPCStackParameter:
    Type: String
    Description: "Name of VPC stack to build on"

  VPCRegionParameter:
    Type: String
    Description: VPC Region

  DomainNameParameter:
    Type: String
    Description: "Project domain name"
    
  HostingBucketParameter:
    Type: String
    Description: "Web hosting S3 bucket name"

  HostingBucketARNParameter:
    Type: String
    Description: "Web hosting bucket ARN"
    
  CFHostedZoneIdParameter:
    Type: String
    Description: "CloudFront DNS Zone ID"
    
  S3DNSNameParameter:
    Type: String
    Description: "S3 bucket DNS name"
    
  WWWCertificateParameter:
    Type: String
    Description: "WWW certificate ARN"
    
Resources:

  HostingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref HostingBucketParameter
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # Policy to make objects in bucket publicly readable. 
  # Applied to bucket.
  HostingBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref HostingBucket
      PolicyDocument: 
        Statement: 
          - Action: 
              - "s3:GetObject"
            Effect: "Allow"
            Resource: 
              - !Sub arn:aws:s3:::${HostingBucketParameter}/*
            Principal: "*" 

  # Role + policy to enable EC2 and Lambda to write (update) files
  # to bucket. Assumed by services as needed.
  HostingBucketRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HostingBucketRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3HostingBucketWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:PutObject*
                  - s3:DeleteObject*
                Resource:
                  - !Sub arn:aws:s3:::${HostingBucketParameter}
                  - !Sub arn:aws:s3:::${HostingBucketParameter}/*

  CDNOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "Cloudfront Origin identity for ${DomainNameParameter}"

# Created cache policy manually as CloudFormation seems to be broken.
# See https://console.aws.amazon.com/cloudfront/v3/home?#/policies
#
#  WWWCachePolicy:
#    Type: AWS::CloudFront::CachePolicy
#    Properties: 
#      CachePolicyConfig: 
#        DefaultTTL: 43200
#        MaxTTL: 86400
#        MinTTL: 300
#        Name: "WWW Cache Policy"
#        ParametersInCacheKeyAndForwardedToOrigin: 
#          CookiesConfig: 
#            CookieBehavior: 'none'
#          EnableAcceptEncodingBrotli: true
#          EnableAcceptEncodingGzip: true
#          HeadersConfig: 
#            HeaderBehavior: 'none'
#          QueryStringsConfig: 
#            QueryStringBehavior: 'none'

  CDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref HostingBucketParameter
        DefaultCacheBehavior:
          CachePolicyId: bb103da8-62f1-4d22-92e8-090ea357685f
          #LambdaFunctionAssociations:
          TargetOriginId: !Sub "S3-origin-${HostingBucket}"
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: True
        Origins:
          - DomainName: !GetAtt HostingBucket.RegionalDomainName
            Id: !Sub "S3-origin-${HostingBucket}"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CDNOriginIdentity}"
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref WWWCertificateParameter
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${DomainNameParameter}."
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt CDN.DomainName
            HostedZoneId: !Ref CFHostedZoneIdParameter
          Name: !Ref HostingBucketParameter
          Type: A
